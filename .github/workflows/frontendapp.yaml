name: "Frontend Pipeline"

run-name: "Frontend deploy by @${{ github.actor }}"

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

on:
  workflow_dispatch: # allow trigger from github dashboard
  # push:
  #   branches:
  #     - "main"
  #   paths:
  #     - "apps/image-share-app-frontend/**.**"
  #     - ".github/workflows/frontendapp.yaml"

# https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml
jobs:
  frontend_build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "Set up QEMU"
      uses: docker/setup-qemu-action@v2

    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v2

    - name: "Login to Docker Hub"
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: "Build and export"
      uses: docker/build-push-action@v4
      with:
        context: "apps/image-share-app-frontend"
        load: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-test:frontend-${{ github.sha }}
        outputs: type=docker,dest=/tmp/docker.tar
        build-args: |
          BASE_API_URL=https://devops-test-backend.devopscycle.com
          BASE_APP_URL=https://devops-test-frontend.devopscycle.com

    - name: "Upload artifact"
      uses: actions/upload-artifact@v3
      with:
        name: myimage
        path: /tmp/docker.tar

  frontend_lint:
    name: "Lint"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.16.0]
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "Install Dependencies"
      run: npm ci
      working-directory: apps/image-share-app-frontend

    - name: "Lint"
      run: npm run lint
      working-directory: apps/image-share-app-frontend

  frontend_test:
    name: "Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.16.0]
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "Install Dependencies"
      run: npm ci
      working-directory: apps/image-share-app-frontend

    - name: "Lint"
      run: npm run test
      working-directory: apps/image-share-app-frontend

  frontend_remove_artifacts:
    name: "Remove Artifacts if not main branch"
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    needs: [frontend_test, frontend_lint]
    steps:
    - name: "Delete Artifact"
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          myimage
          node_modules

  frontend_deliver:
    name: "Deliver to Docker Hub"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [frontend_build, frontend_lint, frontend_test]
    steps:
    - name: "Download artifact"
      uses: actions/download-artifact@v3
      with:
        name: myimage
        path: /tmp

    - name: "Login to Docker Hub"
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: "Push Image to Docker Hub"
      run: |
        docker load --input /tmp/docker.tar
        docker image ls -a
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/devops-test:frontend-${{ github.sha }}

  frontend_kubernetes_deploy:
    name: "Deploy on Azure AKS"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [frontend_deliver]
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "Download artifact"
      uses: actions/download-artifact@v3
      with:
        name: myimage
        path: /tmp

    - name: "Get Docker Image"
      run: |
        docker load --input /tmp/docker.tar
        docker image ls -a

    - name: "Az CLI login"
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: "Install kubectl"
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        # verify installation
        kubectl version --client

    - name: "Install helm"
      run: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update --yes
        sudo apt-get install helm  --yes

        # verify installation
        helm version

    - name: "Install azure cli"
      run: |
        # install azure cli
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        sudo apt-get update --yes
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg --yes
        sudo mkdir -p /etc/apt/keyrings
        curl -sLS https://packages.microsoft.com/keys/microsoft.asc |
            gpg --dearmor |
            sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
        sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
            sudo tee /etc/apt/sources.list.d/azure-cli.list
        sudo apt-get update --yes
        sudo apt-get install azure-cli --yes

        # verify installation
        az --version

    - name: "Install k8s credentials & switch context"
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_CLUSTER_NAME }}
        kubectl config use-context ${{ secrets.AZURE_CLUSTER_NAME }}

    - name: "Create Namespace if not exists"
      run: |
        kubectl create namespace devops-test --dry-run=client -o yaml | kubectl apply -f -

    - name: "Create kubectl secrets"
      run: |
        # create docker registry secrets for pulling images
        kubectl create secret \
          docker-registry regcred \
          -n devops-test \
          --docker-server=https://index.docker.io/v1/ \
          --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
          --dry-run=client -o yaml | \
            kubectl apply -f -

    - name: "Deploy - Helm Package & Upgrade"
      run: |
        kubectl config get-contexts
        helm package --app-version=${{ github.sha }} .
        helm upgrade \
          -i devops-test-frontend './devops-test-frontend-0.0.0.tgz' \
          -n devops-test \
          --timeout 45m0s \
          --wait \
          --set replicaCount=1 \
          --set image=${{ secrets.DOCKERHUB_USERNAME }}/devops-test:frontend-${{ github.sha }}
      working-directory: 'ops/k8s/frontend'

  frontend_cleanup:
    name: "Cleanup Artifacts if main branch"
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    needs: [frontend_kubernetes_deploy]
    steps:
    - name: "Delete Artifact"
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          myimage
          node_modules
